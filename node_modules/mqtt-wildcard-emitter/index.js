const mqttlib = require('mqtt')
const mqtt = mqttlib;
const mqttWildcard = require('mqtt-wildcard');

const EventEmitter = require('events');
class MqttTopicEmitter extends EventEmitter {}
const MqttTopic = new MqttTopicEmitter();

MqttTopicEmitter.prototype.connect = function() {
    MqttTopic.mqttclient = mqttlib.connect.apply(this, arguments);
    MqttTopic.mqttclient.on('message', (topic, message) => {
        MqttTopic.eventNames().forEach(function(topicMask) {
        if (mqttWildcard(topic, topicMask))
            MqttTopic.emit(topicMask, topic, message.toString());
        });
    });
};

MqttTopic.publish = function() {
    MqttTopic.mqttclient.publish.apply(arguments)
}

//override addListener so we will subscribe to the requested MQTT topic(s) at the same time
MqttTopic.on = (function (original) {
    return function (name, callback) {
        MqttTopic.mqttclient.subscribe(name);
        console.log('subscribing',name);
        return original(name, callback);
    }
})(MqttTopic.on.bind(MqttTopic));

module.exports = MqttTopic;
